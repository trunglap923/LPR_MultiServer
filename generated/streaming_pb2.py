# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: streaming.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0fstreaming.proto\x12\tstreaming\"-\n\x05\x46rame\x12\x10\n\x08\x66rame_id\x18\x01 \x01(\x03\x12\x12\n\nimage_data\x18\x02 \x01(\x0c\"w\n\x10VehicleDetection\x12\x10\n\x08\x66rame_id\x18\x01 \x01(\x03\x12\x12\n\nimage_data\x18\x02 \x01(\x0c\x12,\n\x08vehicles\x18\x03 \x03(\x0b\x32\x1a.streaming.DetectedVehicle\x12\x0f\n\x07success\x18\x04 \x01(\x08\"Q\n\x0f\x44\x65tectedVehicle\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x0c\n\x04\x62\x62ox\x18\x02 \x03(\x02\x12\x10\n\x08\x63lass_id\x18\x03 \x01(\x05\x12\x12\n\nconfidence\x18\x04 \x01(\x02\"]\n\x0ePlateDetection\x12\x10\n\x08\x66rame_id\x18\x01 \x01(\x03\x12(\n\x06plates\x18\x02 \x03(\x0b\x32\x18.streaming.DetectedPlate\x12\x0f\n\x07success\x18\x03 \x01(\x08\"Z\n\rDetectedPlate\x12\x0c\n\x04\x62\x62ox\x18\x01 \x03(\x02\x12\x10\n\x08\x63lass_id\x18\x02 \x01(\x05\x12\x12\n\nconfidence\x18\x03 \x01(\x02\x12\x15\n\rcropped_plate\x18\x04 \x01(\x0c\"]\n\x0eTrackingResult\x12\x10\n\x08\x66rame_id\x18\x01 \x01(\x03\x12(\n\x06tracks\x18\x02 \x03(\x0b\x32\x18.streaming.TrackedObject\x12\x0f\n\x07success\x18\x03 \x01(\x08\"J\n\rTrackedObject\x12\n\n\x02id\x18\x01 \x01(\x05\x12\x0c\n\x04\x62\x62ox\x18\x02 \x03(\x02\x12\x10\n\x08\x63lass_id\x18\x03 \x01(\x05\x12\r\n\x05score\x18\x04 \x01(\x02\"[\n\tOCRResult\x12\x10\n\x08\x66rame_id\x18\x01 \x01(\x03\x12+\n\x06plates\x18\x02 \x03(\x0b\x32\x1b.streaming.PlateRecognition\x12\x0f\n\x07success\x18\x03 \x01(\x08\"M\n\x10PlateRecognition\x12\x0c\n\x04\x62\x62ox\x18\x01 \x03(\x02\x12\x14\n\x0cplate_number\x18\x02 \x01(\t\x12\x15\n\rcropped_plate\x18\x03 \x01(\x0c\x32N\n\x15VideoStreamingService\x12\x35\n\x0bStreamVideo\x12\x10.streaming.Frame\x1a\x10.streaming.Frame(\x01\x30\x01\x32^\n\x17VehicleDetectionService\x12\x43\n\x0e\x44\x65tectVehicles\x12\x10.streaming.Frame\x1a\x1b.streaming.VehicleDetection(\x01\x30\x01\x32X\n\x15PlateDetectionService\x12?\n\x0c\x44\x65tectPlates\x12\x10.streaming.Frame\x1a\x19.streaming.PlateDetection(\x01\x30\x01\x32]\n\x0fTrackingService\x12J\n\x0cTrackObjects\x12\x1b.streaming.VehicleDetection\x1a\x19.streaming.TrackingResult(\x01\x30\x01\x32S\n\nOCRService\x12\x45\n\x0eRecognizePlate\x12\x19.streaming.PlateDetection\x1a\x14.streaming.OCRResult(\x01\x30\x01\x62\x06proto3')



_FRAME = DESCRIPTOR.message_types_by_name['Frame']
_VEHICLEDETECTION = DESCRIPTOR.message_types_by_name['VehicleDetection']
_DETECTEDVEHICLE = DESCRIPTOR.message_types_by_name['DetectedVehicle']
_PLATEDETECTION = DESCRIPTOR.message_types_by_name['PlateDetection']
_DETECTEDPLATE = DESCRIPTOR.message_types_by_name['DetectedPlate']
_TRACKINGRESULT = DESCRIPTOR.message_types_by_name['TrackingResult']
_TRACKEDOBJECT = DESCRIPTOR.message_types_by_name['TrackedObject']
_OCRRESULT = DESCRIPTOR.message_types_by_name['OCRResult']
_PLATERECOGNITION = DESCRIPTOR.message_types_by_name['PlateRecognition']
Frame = _reflection.GeneratedProtocolMessageType('Frame', (_message.Message,), {
  'DESCRIPTOR' : _FRAME,
  '__module__' : 'streaming_pb2'
  # @@protoc_insertion_point(class_scope:streaming.Frame)
  })
_sym_db.RegisterMessage(Frame)

VehicleDetection = _reflection.GeneratedProtocolMessageType('VehicleDetection', (_message.Message,), {
  'DESCRIPTOR' : _VEHICLEDETECTION,
  '__module__' : 'streaming_pb2'
  # @@protoc_insertion_point(class_scope:streaming.VehicleDetection)
  })
_sym_db.RegisterMessage(VehicleDetection)

DetectedVehicle = _reflection.GeneratedProtocolMessageType('DetectedVehicle', (_message.Message,), {
  'DESCRIPTOR' : _DETECTEDVEHICLE,
  '__module__' : 'streaming_pb2'
  # @@protoc_insertion_point(class_scope:streaming.DetectedVehicle)
  })
_sym_db.RegisterMessage(DetectedVehicle)

PlateDetection = _reflection.GeneratedProtocolMessageType('PlateDetection', (_message.Message,), {
  'DESCRIPTOR' : _PLATEDETECTION,
  '__module__' : 'streaming_pb2'
  # @@protoc_insertion_point(class_scope:streaming.PlateDetection)
  })
_sym_db.RegisterMessage(PlateDetection)

DetectedPlate = _reflection.GeneratedProtocolMessageType('DetectedPlate', (_message.Message,), {
  'DESCRIPTOR' : _DETECTEDPLATE,
  '__module__' : 'streaming_pb2'
  # @@protoc_insertion_point(class_scope:streaming.DetectedPlate)
  })
_sym_db.RegisterMessage(DetectedPlate)

TrackingResult = _reflection.GeneratedProtocolMessageType('TrackingResult', (_message.Message,), {
  'DESCRIPTOR' : _TRACKINGRESULT,
  '__module__' : 'streaming_pb2'
  # @@protoc_insertion_point(class_scope:streaming.TrackingResult)
  })
_sym_db.RegisterMessage(TrackingResult)

TrackedObject = _reflection.GeneratedProtocolMessageType('TrackedObject', (_message.Message,), {
  'DESCRIPTOR' : _TRACKEDOBJECT,
  '__module__' : 'streaming_pb2'
  # @@protoc_insertion_point(class_scope:streaming.TrackedObject)
  })
_sym_db.RegisterMessage(TrackedObject)

OCRResult = _reflection.GeneratedProtocolMessageType('OCRResult', (_message.Message,), {
  'DESCRIPTOR' : _OCRRESULT,
  '__module__' : 'streaming_pb2'
  # @@protoc_insertion_point(class_scope:streaming.OCRResult)
  })
_sym_db.RegisterMessage(OCRResult)

PlateRecognition = _reflection.GeneratedProtocolMessageType('PlateRecognition', (_message.Message,), {
  'DESCRIPTOR' : _PLATERECOGNITION,
  '__module__' : 'streaming_pb2'
  # @@protoc_insertion_point(class_scope:streaming.PlateRecognition)
  })
_sym_db.RegisterMessage(PlateRecognition)

_VIDEOSTREAMINGSERVICE = DESCRIPTOR.services_by_name['VideoStreamingService']
_VEHICLEDETECTIONSERVICE = DESCRIPTOR.services_by_name['VehicleDetectionService']
_PLATEDETECTIONSERVICE = DESCRIPTOR.services_by_name['PlateDetectionService']
_TRACKINGSERVICE = DESCRIPTOR.services_by_name['TrackingService']
_OCRSERVICE = DESCRIPTOR.services_by_name['OCRService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _FRAME._serialized_start=30
  _FRAME._serialized_end=75
  _VEHICLEDETECTION._serialized_start=77
  _VEHICLEDETECTION._serialized_end=196
  _DETECTEDVEHICLE._serialized_start=198
  _DETECTEDVEHICLE._serialized_end=279
  _PLATEDETECTION._serialized_start=281
  _PLATEDETECTION._serialized_end=374
  _DETECTEDPLATE._serialized_start=376
  _DETECTEDPLATE._serialized_end=466
  _TRACKINGRESULT._serialized_start=468
  _TRACKINGRESULT._serialized_end=561
  _TRACKEDOBJECT._serialized_start=563
  _TRACKEDOBJECT._serialized_end=637
  _OCRRESULT._serialized_start=639
  _OCRRESULT._serialized_end=730
  _PLATERECOGNITION._serialized_start=732
  _PLATERECOGNITION._serialized_end=809
  _VIDEOSTREAMINGSERVICE._serialized_start=811
  _VIDEOSTREAMINGSERVICE._serialized_end=889
  _VEHICLEDETECTIONSERVICE._serialized_start=891
  _VEHICLEDETECTIONSERVICE._serialized_end=985
  _PLATEDETECTIONSERVICE._serialized_start=987
  _PLATEDETECTIONSERVICE._serialized_end=1075
  _TRACKINGSERVICE._serialized_start=1077
  _TRACKINGSERVICE._serialized_end=1170
  _OCRSERVICE._serialized_start=1172
  _OCRSERVICE._serialized_end=1255
# @@protoc_insertion_point(module_scope)
