# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import streaming_pb2 as streaming__pb2


class VideoStreamingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamVideo = channel.stream_stream(
                '/streaming.VideoStreamingService/StreamVideo',
                request_serializer=streaming__pb2.Frame.SerializeToString,
                response_deserializer=streaming__pb2.Frame.FromString,
                )


class VideoStreamingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamVideo(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VideoStreamingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamVideo': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamVideo,
                    request_deserializer=streaming__pb2.Frame.FromString,
                    response_serializer=streaming__pb2.Frame.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'streaming.VideoStreamingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VideoStreamingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamVideo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/streaming.VideoStreamingService/StreamVideo',
            streaming__pb2.Frame.SerializeToString,
            streaming__pb2.Frame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class VehicleDetectionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectVehicles = channel.stream_stream(
                '/streaming.VehicleDetectionService/DetectVehicles',
                request_serializer=streaming__pb2.Frame.SerializeToString,
                response_deserializer=streaming__pb2.VehicleDetection.FromString,
                )


class VehicleDetectionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DetectVehicles(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VehicleDetectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectVehicles': grpc.stream_stream_rpc_method_handler(
                    servicer.DetectVehicles,
                    request_deserializer=streaming__pb2.Frame.FromString,
                    response_serializer=streaming__pb2.VehicleDetection.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'streaming.VehicleDetectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VehicleDetectionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DetectVehicles(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/streaming.VehicleDetectionService/DetectVehicles',
            streaming__pb2.Frame.SerializeToString,
            streaming__pb2.VehicleDetection.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PlateDetectionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DetectPlates = channel.stream_stream(
                '/streaming.PlateDetectionService/DetectPlates',
                request_serializer=streaming__pb2.Frame.SerializeToString,
                response_deserializer=streaming__pb2.PlateDetection.FromString,
                )


class PlateDetectionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DetectPlates(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PlateDetectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DetectPlates': grpc.stream_stream_rpc_method_handler(
                    servicer.DetectPlates,
                    request_deserializer=streaming__pb2.Frame.FromString,
                    response_serializer=streaming__pb2.PlateDetection.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'streaming.PlateDetectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PlateDetectionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DetectPlates(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/streaming.PlateDetectionService/DetectPlates',
            streaming__pb2.Frame.SerializeToString,
            streaming__pb2.PlateDetection.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TrackingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrackObjects = channel.stream_stream(
                '/streaming.TrackingService/TrackObjects',
                request_serializer=streaming__pb2.VehicleDetection.SerializeToString,
                response_deserializer=streaming__pb2.TrackingResult.FromString,
                )


class TrackingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TrackObjects(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrackingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrackObjects': grpc.stream_stream_rpc_method_handler(
                    servicer.TrackObjects,
                    request_deserializer=streaming__pb2.VehicleDetection.FromString,
                    response_serializer=streaming__pb2.TrackingResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'streaming.TrackingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrackingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TrackObjects(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/streaming.TrackingService/TrackObjects',
            streaming__pb2.VehicleDetection.SerializeToString,
            streaming__pb2.TrackingResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OCRServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecognizePlate = channel.stream_stream(
                '/streaming.OCRService/RecognizePlate',
                request_serializer=streaming__pb2.PlateDetection.SerializeToString,
                response_deserializer=streaming__pb2.OCRResult.FromString,
                )


class OCRServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RecognizePlate(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OCRServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecognizePlate': grpc.stream_stream_rpc_method_handler(
                    servicer.RecognizePlate,
                    request_deserializer=streaming__pb2.PlateDetection.FromString,
                    response_serializer=streaming__pb2.OCRResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'streaming.OCRService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OCRService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RecognizePlate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/streaming.OCRService/RecognizePlate',
            streaming__pb2.PlateDetection.SerializeToString,
            streaming__pb2.OCRResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
